try:  # pragma: no cover - optional dependency
    from tinkoff.invest import Client, MoneyValue
    from tinkoff.invest.services import SandboxService
except Exception:  # pragma: no cover - keep script importable without SDK
    Client = None  # type: ignore
    MoneyValue = None  # type: ignore
    SandboxService = None  # type: ignore

TOKEN = "t.VtxWp5QjcwbIQuqg7DYFFocZgtTRN2ofhqisP3cW8SptzsxLzuny5n2LILOjbVm7_o0PgWrFcDWKBAjQk5oqFA"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –ø–µ—Å–æ—á–Ω–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω

def main():
    if Client is None or MoneyValue is None:
        print(
            "tinkoff-invest SDK is required to run sandbox_test.py. "
            "Install the 'tinkoff-investments' package first."
        )
        return 1
    with Client(TOKEN) as client:
        print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ sandbox –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ===")

        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ sandbox –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = client.sandbox.get_sandbox_accounts()

        if accounts.accounts:
            account_id = accounts.accounts[0].id
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π sandbox account_id: {account_id}")
        else:
            print("‚ö†Ô∏è Sandbox –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")
            resp = client.sandbox.open_sandbox_account()
            account_id = resp.account_id
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π sandbox account_id: {account_id}")

        # –ü–æ–ø–æ–ª–Ω—è–µ–º —Å—á—ë—Ç
        print("üí∞ –ü–æ–ø–æ–ª–Ω—è–µ–º —Å—á—ë—Ç –Ω–∞ 100 000 ‚ÇΩ...")
        client.sandbox.sandbox_pay_in(
            account_id=account_id,
            amount=MoneyValue(currency="rub", units=100000)
        )
        print("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω")

        print("\nüëâ –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç account_id –≤ config.yaml:")
        print(account_id)

if __name__ == "__main__":
    raise SystemExit(main())

